// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/Modal Render: match snapshot 1`] = `
.c7 {
  -webkit-align-items: baseline;
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  -webkit-transition: all 0.1s ease-in-out;
  transition: all 0.1s ease-in-out;
  background-color: !important;
  color: !important;
  border-color: !important;
}

.c7:hover:not(:disabled) {
  background-color: !important;
  border-color: !important;
  color: !important;
}

.c7:hover:not(:disabled) svg {
  color: !important;
}

.c7:hover:not(:disabled) svg path {
  stroke: !important;
}

.c7:focus {
  box-shadow: 0 0 0 3px !important;
}

.c7:disabled {
  color: !important;
  background-color: !important;
  border-color: !important;
}

.c7:disabled svg {
  color: !important;
}

.c7:disabled svg path {
  stroke: !important;
}

.c7:disabled .knapp__spinner {
  border: 2px solid !important;
  border-top-color: !important;
  border-right-color: !important;
}

.c7 .knapp__spinner {
  border: 2px solid !important;
  border-left-color: !important;
  border-bottom-color: !important;
}

.c7 svg {
  color: !important;
}

.c7 svg path {
  stroke: !important;
}

.c8 {
  -webkit-transition: all 0.1s ease-in-out;
  transition: all 0.1s ease-in-out;
  background-color: inherit !important;
  color: !important;
  border-color: !important;
}

.c8:hover:not(:disabled) {
  background-color: !important;
  color: !important;
}

.c8:hover:not(:disabled) svg {
  color: !important;
}

.c8:hover:not(:disabled) svg path {
  stroke: !important;
}

.c8:disabled {
  color: !important;
  background-color: !important;
  border-color: !important;
}

.c8:disabled svg {
  color: !important;
}

.c8:disabled svg path {
  stroke: !important;
}

.c8:disabled .knapp__spinner {
  border: 2px solid !important;
  border-top-color: !important;
  border-right-color: !important;
}

.c8 .knapp__spinner {
  border: 2px solid !important;
  border-left-color: !important;
  border-bottom-color: !important;
}

.c8:not(:disabled) svg {
  color: !important;
}

.c8:not(:disabled) svg path {
  stroke: !important;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  padding: 1rem 1rem 1rem 1rem;
  border-radius: 4px;
  position: relative;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  overflow: inherit;
  max-height: 100%;
  margin-bottom: 0;
  z-index: 1010;
}

.c2 {
  position: absolute !important;
  right: 0.5rem;
  top: 0.5rem;
  z-index: 999;
}

.c3 {
  text-align: center;
}

.c4 {
  margin: 1.5rem;
  text-align: center;
}

.c5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c6 {
  margin-right: 1rem;
  margin-top: 0.5rem;
  margin-botton: 0.5rem;
}

.c1 {
  overflow: auto;
  max-height: 85vh;
}

.c1.icon {
  margin-top: 3rem;
}

.c1.buttons {
  margin-top: 3rem;
}

<Modal
  closeButton={true}
  highContrast={false}
  modal={
    Object {
      "modalButtons": Array [
        Object {
          "main": true,
          "onClick": [MockFunction],
          "text": "modalMainButtonText",
        },
        Object {
          "onClick": [MockFunction],
          "text": "modalOtherButtonText",
        },
      ],
      "modalText": "mockModalText",
      "modalTitle": "mockModalTitle",
    }
  }
  onModalClose={[MockFunction]}
>
  <Memo(l) />
  <Styled(Modal)
    isOpen={true}
    onRequestClose={[Function]}
    overlayClassName="modal__overlay"
  >
    <Modal
      ariaHideApp={true}
      bodyOpenClassName="ReactModal__Body--open"
      className="c0"
      closeTimeoutMS={0}
      contentElement={[Function]}
      isOpen={true}
      onRequestClose={[Function]}
      overlayClassName="modal__overlay"
      overlayElement={[Function]}
      parentSelector={[Function]}
      portalClassName="ReactModalPortal"
      preventScroll={false}
      role="dialog"
      shouldCloseOnEsc={true}
      shouldCloseOnOverlayClick={true}
      shouldFocusAfterRender={true}
      shouldReturnFocusAfterClose={true}
    >
      <Portal
        containerInfo={
          .c7 {
  -webkit-align-items: baseline;
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  -webkit-transition: all 0.1s ease-in-out;
  transition: all 0.1s ease-in-out;
  background-color: !important;
  color: !important;
  border-color: !important;
}

.c7:hover:not(:disabled) {
  background-color: !important;
  border-color: !important;
  color: !important;
}

.c7:hover:not(:disabled) svg {
  color: !important;
}

.c7:hover:not(:disabled) svg path {
  stroke: !important;
}

.c7:focus {
  box-shadow: 0 0 0 3px !important;
}

.c7:disabled {
  color: !important;
  background-color: !important;
  border-color: !important;
}

.c7:disabled svg {
  color: !important;
}

.c7:disabled svg path {
  stroke: !important;
}

.c7:disabled .knapp__spinner {
  border: 2px solid !important;
  border-top-color: !important;
  border-right-color: !important;
}

.c7 .knapp__spinner {
  border: 2px solid !important;
  border-left-color: !important;
  border-bottom-color: !important;
}

.c7 svg {
  color: !important;
}

.c7 svg path {
  stroke: !important;
}

.c8 {
  -webkit-transition: all 0.1s ease-in-out;
  transition: all 0.1s ease-in-out;
  background-color: inherit !important;
  color: !important;
  border-color: !important;
}

.c8:hover:not(:disabled) {
  background-color: !important;
  color: !important;
}

.c8:hover:not(:disabled) svg {
  color: !important;
}

.c8:hover:not(:disabled) svg path {
  stroke: !important;
}

.c8:disabled {
  color: !important;
  background-color: !important;
  border-color: !important;
}

.c8:disabled svg {
  color: !important;
}

.c8:disabled svg path {
  stroke: !important;
}

.c8:disabled .knapp__spinner {
  border: 2px solid !important;
  border-top-color: !important;
  border-right-color: !important;
}

.c8 .knapp__spinner {
  border: 2px solid !important;
  border-left-color: !important;
  border-bottom-color: !important;
}

.c8:not(:disabled) svg {
  color: !important;
}

.c8:not(:disabled) svg path {
  stroke: !important;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  padding: 1rem 1rem 1rem 1rem;
  border-radius: 4px;
  position: relative;
  -webkit-box-flex: 0;
  -webkit-flex-grow: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  overflow: inherit;
  max-height: 100%;
  margin-bottom: 0;
  z-index: 1010;
}

.c2 {
  position: absolute !important;
  right: 0.5rem;
  top: 0.5rem;
  z-index: 999;
}

.c3 {
  text-align: center;
}

.c4 {
  margin: 1.5rem;
  text-align: center;
}

.c5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c6 {
  margin-right: 1rem;
  margin-top: 0.5rem;
  margin-botton: 0.5rem;
}

.c1 {
  overflow: auto;
  max-height: 85vh;
}

.c1.icon {
  margin-top: 3rem;
}

.c1.buttons {
  margin-top: 3rem;
}

<div
            class="ReactModalPortal"
          >
            <div
              class="ReactModal__Overlay modal__overlay"
            >
              <div
                aria-modal="true"
                class="ReactModal__Content c0"
                role="dialog"
                tabindex="-1"
              >
                <div
                  class="c1"
                >
                  <button
                    class="lukknapp c2"
                    data-test-id="modal__close-button-id"
                  >
                    <span
                      class="text-hide"
                    />
                  </button>
                  <h2
                    class="typo-undertittel c3"
                    data-test-id="modal__title-id"
                  >
                    mockModalTitle
                  </h2>
                  <div
                    class="c4"
                    data-test-id="modal__text-id"
                  >
                    mockModalText
                  </div>
                </div>
                <div
                  class="c5 buttons"
                >
                  <div
                    class="c6"
                  >
                    <button
                      class="knapp c7 knapp--hoved"
                      data-test-id="modal__button-id-0"
                      id="modal__button-id-0"
                      type="submit"
                    >
                      modalMainButtonText
                    </button>
                  </div>
                  <div
                    class="c6"
                  >
                    <button
                      class="knapp c8 knapp--standard"
                      data-test-id="modal__button-id-1"
                      id="modal__button-id-1"
                      type="submit"
                    >
                      modalOtherButtonText
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        }
      >
        <ModalPortal
          ariaHideApp={true}
          bodyOpenClassName="ReactModal__Body--open"
          className="c0"
          closeTimeoutMS={0}
          contentElement={[Function]}
          defaultStyles={
            Object {
              "content": Object {
                "WebkitOverflowScrolling": "touch",
                "background": "#fff",
                "border": "1px solid #ccc",
                "borderRadius": "4px",
                "bottom": "40px",
                "left": "40px",
                "outline": "none",
                "overflow": "auto",
                "padding": "20px",
                "position": "absolute",
                "right": "40px",
                "top": "40px",
              },
              "overlay": Object {
                "backgroundColor": "rgba(255, 255, 255, 0.75)",
                "bottom": 0,
                "left": 0,
                "position": "fixed",
                "right": 0,
                "top": 0,
              },
            }
          }
          isOpen={true}
          onRequestClose={[Function]}
          overlayClassName="modal__overlay"
          overlayElement={[Function]}
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          preventScroll={false}
          role="dialog"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
          style={
            Object {
              "content": Object {},
              "overlay": Object {},
            }
          }
        >
          <div
            className="ReactModal__Overlay modal__overlay"
            onClick={[Function]}
            onMouseDown={[Function]}
            style={Object {}}
          >
            <div
              aria-modal={true}
              className="ReactModal__Content c0"
              onClick={[Function]}
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              onMouseUp={[Function]}
              role="dialog"
              style={Object {}}
              tabIndex="-1"
            >
              <styled.div
                className=""
              >
                <div
                  className="c1"
                >
                  <Styled(Lukknapp)
                    data-test-id="modal__close-button-id"
                    onClick={[Function]}
                  >
                    <Lukknapp
                      bla={false}
                      className="c2"
                      data-test-id="modal__close-button-id"
                      hvit={false}
                      onClick={[Function]}
                      overstHjorne={false}
                    >
                      <button
                        className="lukknapp c2"
                        data-test-id="modal__close-button-id"
                        onClick={[Function]}
                      >
                        <span
                          className="text-hide"
                        />
                      </button>
                    </Lukknapp>
                  </Styled(Lukknapp)>
                  <Styled(Undertittel)
                    data-test-id="modal__title-id"
                  >
                    <Undertittel
                      className="c3"
                      data-test-id="modal__title-id"
                    >
                      <TypografiBase
                        className="c3"
                        data-test-id="modal__title-id"
                        type="undertittel"
                      >
                        <h2
                          className="typo-undertittel c3"
                          data-test-id="modal__title-id"
                        >
                          mockModalTitle
                        </h2>
                      </TypografiBase>
                    </Undertittel>
                  </Styled(Undertittel)>
                  <styled.div
                    data-test-id="modal__text-id"
                  >
                    <div
                      className="c4"
                      data-test-id="modal__text-id"
                    >
                      mockModalText
                    </div>
                  </styled.div>
                </div>
              </styled.div>
              <styled.div
                className="buttons"
              >
                <div
                  className="c5 buttons"
                >
                  <styled.div
                    key="0"
                  >
                    <div
                      className="c6"
                    >
                      <Styled(u)
                        data-test-id="modal__button-id-0"
                        disabled={false}
                        id="modal__button-id-0"
                        key="modalMainButtonText"
                        onClick={[Function]}
                      >
                        <u
                          className="c7"
                          data-test-id="modal__button-id-0"
                          disabled={false}
                          id="modal__button-id-0"
                          onClick={[Function]}
                        >
                          <p
                            autoDisableVedSpinner={false}
                            className="c7"
                            data-test-id="modal__button-id-0"
                            disabled={false}
                            htmlType="submit"
                            id="modal__button-id-0"
                            inaktivKlasseVedDisabled={false}
                            kompakt={false}
                            mini={false}
                            onClick={[Function]}
                            spinner={false}
                            type="hoved"
                          >
                            <button
                              className="knapp c7 knapp--hoved"
                              data-test-id="modal__button-id-0"
                              disabled={false}
                              id="modal__button-id-0"
                              onClick={[Function]}
                              type="submit"
                            >
                              modalMainButtonText
                            </button>
                          </p>
                        </u>
                      </Styled(u)>
                    </div>
                  </styled.div>
                  <styled.div
                    key="1"
                  >
                    <div
                      className="c6"
                    >
                      <Styled(u)
                        data-test-id="modal__button-id-1"
                        disabled={false}
                        id="modal__button-id-1"
                        key="modalOtherButtonText"
                        onClick={[Function]}
                      >
                        <u
                          className="c8"
                          data-test-id="modal__button-id-1"
                          disabled={false}
                          id="modal__button-id-1"
                          onClick={[Function]}
                        >
                          <p
                            autoDisableVedSpinner={false}
                            className="c8"
                            data-test-id="modal__button-id-1"
                            disabled={false}
                            htmlType="submit"
                            id="modal__button-id-1"
                            inaktivKlasseVedDisabled={false}
                            kompakt={false}
                            mini={false}
                            onClick={[Function]}
                            spinner={false}
                            type="standard"
                          >
                            <button
                              className="knapp c8 knapp--standard"
                              data-test-id="modal__button-id-1"
                              disabled={false}
                              id="modal__button-id-1"
                              onClick={[Function]}
                              type="submit"
                            >
                              modalOtherButtonText
                            </button>
                          </p>
                        </u>
                      </Styled(u)>
                    </div>
                  </styled.div>
                </div>
              </styled.div>
            </div>
          </div>
        </ModalPortal>
      </Portal>
    </Modal>
  </Styled(Modal)>
</Modal>
`;
